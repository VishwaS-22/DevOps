/*
Instructions

About Randomness
Package math/rand provides support for generating pseudo-random numbers.
Function rand.Float64 returns a random floating point number between 0.0 and 1.0
There is also support for shuffling a slice (or other data structures)

Seeds:
The number sequences generated by package math/rand are not truly random.
They are completely determined by an initial seed value. By default, the package uses the number 1 as a seed.

In order to get a different sequence of random numbers, we need to set a different seed. A simple approach is to seed with the current computer time.

Setting the seed must be done before calling any of the functions that generate random numbers. We usually only need to set the seed once in our program. 
From one seed we can generate many random numbers.
If you don't call rand.Seed, then the package will produce the same sequence of random numbers each time your program runs!
*/

package chance

import (
    "math/rand"
    "time"
)

// SeedWithTime seeds math/rand with the current computer time.
func SeedWithTime() {
	rand.Seed(time.Now().UnixNano())
}

// RollADie returns a random int d with 1 <= d <= 20.
func RollADie() int {
	return 1+rand.Intn(20)
}

// GenerateWandEnergy returns a random float64 f with 0.0 <= f < 12.0.
func GenerateWandEnergy() float64 {
	return rand.Float64()*12.0
    
}

// ShuffleAnimals returns a slice with all eight animal strings in random order.
func ShuffleAnimals() []string {
	s:=[]string{"ant","beaver","cat","dog","elephant","fox","giraffe","hedgehog"}
    rand.Shuffle(len(s),func(i,j int){
        s[i],s[j]=s[j],s[i]
    })
	return s
}
